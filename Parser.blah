# class CLASS_NAME
#   [precedance table]
#   [token declarations]
#   [expected number of S/R conflict]
#   [options]
#   [semantic value convertion]
#   [start rule]
# rule
#   GRAMMARS

class Parser

    prechigh
      # nonassoc '++'
      # left     '*' '/'
      # left     '+' '-'
      # right    '='
    preclow


    token 

        CREATE BOT EXECUTE IF ELSE WHILE INT BOOL CHAR STORE RECIEVE ON END ACTIVATE 
        ACTIVATION ADVANCE DACTIVATE DEACTIVATION DEFAULT COLLECT AS DROP LEFT RIGHT UP 
        DOWN READ TRUE FALSE

        MENORIGUAL MAYORIGUAL NOIGUAL CONJUNCION DISYUNCION NEGACION MENOR MAYOR IGUAL 

        COMA PUNTO DOSPUNTOS PARABRE PARCIERRA 

        SUMA RESTA MULT DIV MOD 

        Ident("varX") Character('p') Num(4269) 
        ME

    rule

    # TOKEN
    # : TOKEN  Accion a realizar
    # |
    # |
    # ;
    # ...

    CREATE 
    : declarationList
    |
    ;

    declarationlist
    : declaration
    | declarationList declaration
    ;

    declaration 
    : type BOT listIdent 
    ;

    EXECUTE
    : ctrlrInstruction PUNTO ctrlrInstruction
    | 
    ;

    listBehavior
    : behavior
    | listBehavior behavior
    ;

    behavior
    : ON ACTIVATION DOSPUNTOS botInstruction
    | ON DEACTIVATION DOSPUNTOS botInstruction
    | ON DEFAULT DOSPUNTOS botInstruction
    ; 

    
    ctrlrInstruction
    : CONDITIONAL 
    | UNDFITER
    | ACTIVATE  listIdent
    | DEACTEVATE listIdent
    | ADVANCE listIdent
    ; 

    listIdent
    : IDENT 
    | listIdent COMA IDENT
    ;

    CONDITIONAL##Aqui hay un peo con las instrucciones
    : IF boolExpr DOSPUNTOS botInstruction
    | IF boolExpre DOSPUNTOS botInstruction ELSE botInstruction
    ;

    UNDFITER##Aqui hay un peo con las instrucciones
    : WHILE boolExpr DOSPUNTOS botInstruction
    ;

    type
    : INT
    | BOOL
    | CHAR 
    ;

    botInstruction
    : botInstruction PUNTO botInstruction
    | STORE expression
    | COLLECT AS VARIABLE
    | COLLECT 
    | DROP
    | MOVE direction
    ;

    direction
    : LEFT
    | RIGHT
    | UP
    | DOWN
    ;

    expression
    : literal
    | variable 
    | aritExpr
    | boolExpr
    | relExpr
    ;

    aritExpr
    : aritExpr SUMA aritExpr  
    | aritExpr RESTA aritExpr 
    | aritExpr MULT aritExpr 
    | aritExpr DIV aritExpr 
    | aritExpr MOD aritExpr
    | unaryMinus aritExpr
    | PARABRE aritExpr PARCIERRA
    | literal
    ;
    
    relExpr
    : aritExpr MENORIGUAL aritExpr 
    | aritExpr MAYORIGUAL aritExpr 
    | aritExpr NOIGUAL aritExpr 
    | aritExpr MENOR aritExpr 
    | aritExpr MAYOR aritExpr 
    | airtExpr IGUAL aritExpr 
    | boolExpr IGUAL boolExpr
    | boolExpr NOIGUAL boolExpr 
    | PARABRE boolExpr PARCIERRA
    | literal
    ;

    boolExpr
    : NEGACION boolExpr
    | boolExpr CONJUNCION boolExpr 
    | boolExpr DISYUNCION boolExpr
    | literal
    ;

    literal
    : number#
    | boole#
    | char#UN POCO DE CONFUSION AQUI
    ;

    variable
    : IDENT 
    | ME
    ;

    number#algo mas para diferenciar con el tipo?
    | NUM
    ;

    bolee
    : TRUE
    | FALSE
    ;

    char
    : CHARACTER
    ;

    # TOKEN
    # : TOKEN  Accion a realizar
    # |
    # |
    # ;
    # ...
        
end